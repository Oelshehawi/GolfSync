---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- COME UP WITH IMPLEMENATION FOR ANY PROMPT I SEND, AND EXPLAIN HOW YOU WILL IMPLEMENT, WHAT FILES WILL BE EDITED AND GET AGREEMENT FROM ME BEFORE ACTUALY EDITING OR CHANGING FILES
- DO NOT JUST AFFIRM MY BELIEFS, CHALLENGE ME AS IF YOU'RE A SENIOR DEVELOPER WHO IS AN EXPERT IN BACKEND AND UI/UX
- refer to other similar sections of app to ensure consistency
- use ui components in components folder whenever possible for styling
- all server side functions or functions that interact with server should check for organization id
- refer to [schema.ts](mdc:src/server/db/schema.ts) when doing anything with database to gain proper understanding of what needs to be updated
- always place databse functions in correct data.ts folder or actions.ts folder depending on what schemas being updated
- orgID should be fetches using @getOrganizationId FUNCTION thats already defeind in [auth.ts](mdc:src/lib/auth.ts) NOT await auth
- any function defined in a data.ts file canot be used in components marked with use client directive. only functions that are actions can, otherwise we must fetch in parent server compnent and pass down to client components.

## Date and Timezone Handling
- Always use utility functions in @utils.ts for date manipulation and formatting
- When passing dates between server and client components, use string format (YYYY-MM-DD) instead of Date objects to avoid timezone inconsistencies
- Server-rendered dates may be interpreted differently when hydrated on the client due to timezone differences
- Use `preserveDate()` when you need a Date object that preserves the intended date regardless of timezone
- For database queries or date math operations, first parse strings into dates using consistent methods from utils.ts
- If creating a date on the server that will be used on the client, use UTC methods (getUTCFullYear, etc.) to ensure consistency